#+TITLE:NOTES
#+AUTHOR:谢劲  https://github.com/eric8180/Notes.git

* eric's note       
                                                            
** plan
*** time management

   * time mangagement
    |            | 工作时间  | 运动时间   | 阅读   |
    |------------+-----------+------------+----------|
    | 工作日     | 7-9 hours | 0.5 hour   | 0.5 hour |
    | 周六       | 随意      | 随意       | 随意     |
    | 周日       | 1-5 hours | 0.5-1 hour | 0.5 hour |
    | 法定节假日 | 随意      | 随意       | 随意     |

   
   * checkout
    | 日期      | 考核 |   | 日期      | 考核 |   | 日期      | 考核 |   | 日期      | 考核 |
    |-----------+------+---+-----------+------+---+-----------+------+---+-----------+------|
    | 2016/5/4  | B+   |   | 2016/5/10 | D    |   | 2016/5/16 | B+   |   | 2016/5/22 | C    |
    | 2016/5/5  | C    |   | 2016/5/11 | D    |   | 2016/5/17 | B+   |   | 2016/5/23 | B+   |
    | 2016/5/6  | D    |   | 2016/5/12 | D    |   | 2016/5/18 | B+   |   | 2016/5/24 | D    |
    | 2016/5/7  | D    |   | 2016/5/13 | C    |   | 2016/5/19 | D    |   | 2016/5/25 | C+   |
    | 2016/5/8  | D    |   | 2016/5/14 | D    |   | 2016/5/20 | D    |   | 2016/5/26 | B    |
    | 2016/5/9  | D    |   | 2016/5/15 | C    |   | 2016/5/21 | C    |   | 2016/5/27 | D    |
    |-----------+------+---+-----------+------+---+-----------+------+---+-----------+------|
    | 2016/5/28 | C    |   | 2016/6/4  | A    |   | 2016/6/11 | B    |   | 2016/6/18 | C    |
    | 2016/5/29 | C    |   | 2016/6/5  | E    |   | 2016/6/12 | S    |   | 2016/6/19 | C    |
    | 2016/5/30 | A    |   | 2016/6/6  | B    |   | 2016/6/13 | C+   |   | 2016/6/20 | C    |
    | 2016/5/31 | C+   |   | 2016/6/7  | B    |   | 2016/6/14 | C    |   | ...       | C    |
    | 2016/6/1  | C+   |   | 2016/6/8  | B    |   | 2016/6/15 | B    |   | ...       | C    |
    | 2016/6/2  | D    |   | 2016/6/9  | B    |   | 2016/6/16 | B    |   | ...       | C    |
    | 2016/6/3  | B+   |   | 2016/6/10 | B    |   | 2016/6/17 | B    |   | ...       | C    |
    |-----------+------+---+-----------+------+---+-----------+------+---+-----------+------|
    | 2016/7/4  | B+   |   | 2016/7/11 | A    |   | 2016/7/18 | B+   |   | 2016/7/25 | C    |
    | 2016/7/5  | C    |   | 2016/7/12 | B+   |   | 2016/7/19 | C    |   | 2016/7/26 | B    |
    | 2016/7/6  | B+   |   | 2016/7/13 | B    |   | 2016/7/20 | A    |   | 2016/7/27 | B    |
    | 2016/7/7  | B+   |   | 2016/7/14 | B    |   | 2016/7/21 | C+   |   | 2016/7/28 | B    |
    | 2016/7/8  | C    |   | 2016/7/15 | B    |   | 2016/7/22 | B    |   | 2016/7/29 | C    |
    | 2016/7/9  | B    |   | 2016/7/16 | B    |   | 2016/7/23 | B    |   | 2016/7/30 | B    |
    | 2016/7/10 | B    |   | 2016/7/17 | C    |   | 2016/7/24 | B    |   | 2016/7/31 | C    |
    | 周总评    | B    |   | 周总评    | B    |   | 周总评    | B    |   | 周总评    | C+   |
    |-----------+------+---+-----------+------+---+-----------+------+---+-----------+------|
    | 2016/8/1  | B+   |   | 2016/8/8  | B    |   | 2016/8/15 | A    |   | 2016/8/22 | C    |
    | 2016/8/2  | B+   |   | 2016/8/9  | A+   |   | 2016/8/16 | A    |   | 2016/8/23 | C    |
    | 2016/8/3  | B    |   | 2016/8/10 | A    |   | 2016/8/17 | C    |   | 2016/8/24 | B    |
    | 2016/8/4  | B    |   | 2016/8/11 | A    |   | 2016/8/18 | B    |   | 2016/8/25 | C    |
    | 2016/8/5  | C    |   | 2016/8/12 | B    |   | 2016/8/19 | C    |   | 2016/8/26 | C    |
    | 2016/8/6  | B    |   | 2016/8/13 | B    |   | 2016/8/20 | B    |   | 2016/8/27 | S    |
    | 2016/8/7  | B    |   | 2016/8/14 | B    |   | 2016/8/21 | C    |   | 2016/8/28 | A    |
    | 周总评    | B    |   | 周总评    | B+   |   | 周总评    | B    |   | 周总评    | B    |
    |-----------+------+---+-----------+------+---+-----------+------+---+-----------+------|
    | 2016/8/29 | C    |   | 2016/9/5  | B    |   | 2016/9/12 | B+   |   |           |      |
    | 2016/8/30 | C    |   | 2016/9/6  | B    |   | 2016/9/13 | B+   |   |           |      |
    | 2016/8/31 | C    |   | 2016/9/7  | A    |   | 2016/9/14 | B+   |   |           |      |
    | 2016/9/1  | C    |   | 2016/9/8  | A    |   | 2016/9/15 | B    |   |           |      |
    | 2016/9/2  | C    |   | 2016/9/9  | B    |   | 2016/9/16 | B    |   |           |      |
    | 2016/9/3  | C    |   | 2016/9/10 | B    |   | 2016/9/17 | B    |   |           |      |
    | 2016/9/4  | C    |   | 2016/9/11 | B    |   | 2016/9/18 | B+   |   |           |      |
    | 周总评    | C    |   | 周总评    | B+   |   | 周总评    | B+   |   |           |      |


*** reading
    | 书名称           | 阅读计划             | 备注         | 完成情况 | 归档       |
    |------------------+----------------------+--------------+----------+------------|
    | 感谢自己的不完美 | 2016/5/25            | 22号完成阅读 | 按时完成 | 网易云阅读 |
    | 爱的觉醒         | 2016/5/30            | 31号完成阅读 | 按时完成 | 网易云阅读 |
    | 24重人格         | 2016/6/1——2016/6/15  | 6号完成阅读  | 提前完成 | 网易云阅读 |
    | 灵魂的黑夜       | 2016/6/7--2016/7/15  | 17号完成阅读 | 超时完成 | 网易云阅读 |
    | 当下的力量       | 2016/7/26--2016/8/15 | 16号完成阅读 | 超时完成 | 网易云阅读 |
    | 沉默的大多数     | 2016/9/6 开始          |              |          |            |
    |                  |                      |              |          |            |


**** 感谢自己的不完美 读书笔记
      * 他的痛苦，多数时候不是那种尖锐的刺痛，而是钝痛，它散布在他人生中的每一时刻、每一角落，围裹着他，让他
        感受不到其他事物
      * 我们需切记：我们的力量不在于我们看上去有多快乐，而在于我们的心离我们的人生真相有多近
      * 愤怒，给予你力量和动力，让你生命的每一分钟都具有创意，每一封中都能表现你自己的风采。没有愤怒，你就会在
        不适当的地方屈服，就会手足无措
      * 性与攻击 VS 爱与自由
      * 通常而言一个人童年得到的爱越多，一个人越是难追。这样的人会相信自己的感觉，凭感觉去找到适合自己的人。..
        相对而言，童年得到的爱越少，一个人就越容易追。只要你对他好，他就很容易感动，而暂时接纳你。但是，他是一开
        始容易追到，而以后会很难相处，因为他会过于敏感。
      * 追求优秀不是克服自卑的良药，特别自控也不是情绪化的答案，在乎自卑和在乎优秀是一回事
      * 爱不是为了幸福和快乐。爱首先是为了强迫性重复。
**** 爱的觉醒 读书笔记
        * 游戏之所以使人着迷，因为它能让人陷入忘我的境界从而度过大把的时光，好让自己无法专心面对自己
          而停止思考
        * 爱不是一种执着，执着一出现，恐惧便产生了。而恐惧不可避免地又会变成独裁主义、占有、压抑和
          掌控
**** 灵魂的黑夜 读书笔记
     * 生活中任何的唯物质论都会使灵魂变得粗鄙不堪，任何的唯心论都会使灵魂变得虚无缥缈
     * 没当遇到困难A时，总是通过解决别的问题B的成就感来拖延当前问题的解决。也许是心理上
       就觉得问题A是无法解决的，这个源头可能来自以前的声音问题。因为在当时声音是无法通过
       心理去调节的，只有等它自己转换，后来果然就变好了。很可能因此养成了该“问题解决”
       模式。
     * 事物的真谛往往只能由美得事物来展现？
     * 在浪漫中最主要的因素便是一种浓重的、梦幻般的无意识
**** obsessive love 读书笔记
**** Thoughts of sexual preference 
     * closeted 的出现包括两方面的原因：外界的压力（客观）和内在对 straight pattern的认同（部分或者全部）（主观）
       要彻底的coming out 是否需要颠覆或者改变family line 这种观点
**** 当下的力量
     * 生命的秘密在于：在你死亡之前死亡，并发现原来根本没有死亡
     * 苦难只有在时间中才能存在，在当下它无法存活，问题是思维创造的，它们需要时间来生存。在当下时刻的
       现实情况下，它们无法生存
     * 过于注重目标，你生命的旅程不再是一场奇妙的探险，它变成了一个为了达到目标、获得成就的强迫性需要，
       你不会再看到路边的花朵或闻到它的芬芳，也不会察觉到存在于当下的围绕着你的生命的美丽和奇迹
     * 对你自己和其他人来说，只有通过观察你处理这些挑战的方式，才能看出你的意识水平
     * 不快乐比疾病的传播速度更快、更容易
     * 普通的无意识状态通常与抗拒当下时刻有关，幻想未来的美好或者怀念过去的乐事都属于无意识状态
     * 你的幸福和不幸是一个整体，只是时间的幻想将它们分开了而已
     * 

** reserve
*** concept
            * EPOC (excess post - exercise oxygen consumption)
               运动后过量氧耗:运动后恢复期内为了偿还运动中的氧亏,以及在运动后使处于高水平代
               谢的机体恢复到安静水平时消耗的氧量,称为运动后过量氧耗。
            * UEFI,全称Unified Extensible Firmware Interface,即“统一的可扩展固件接口”,是一种详
               细描述全新类型接口的标准,是适用于电脑的标准固件接口,旨在代替BIOS(基本输入/输出系
               统)。此标准由UEFI联盟中的140多个技术公司共同创建,其中包括微软公司。UEFI旨在提高软
               件互操作性和解决BIOS的局限性。
            * COM组件，一种新的软件开发技术。在COM架构下各个组件可以使
              用不同的语言
*** linux
            * Linux文件系统以及目录结构简介
                 http://blog.chinaunix.net/uid-9525959-id-2001812.html
                 其中Linux与Windows文件系统不同的是,Linux没有硬盘之分全是文件,但是每个文件里装的东西
                 有个大概的分类。比如/boot里面放的就是引导。
            * 设置新的环境变量:env指令是显示当前用户的环境变量。
                 gedit /etc/profile
                 增加 DEBIAN _ BACKUP="/media/学习" （变量）
                 终端输入 source /etc/profile  （使变量即可生效）
                 echo $DEBIAN _ BACKUP 是否设置正确
                 重启后永久生效
            *  fat文件系统采取链表的方式存放文件数据,读取所有数据需要依次遍历所有节点,因此当文件过散的
                 时候我们读取该文件的所有数据需要硬盘转好几圈,因此windows会经常需要磁盘碎片整理。ext文件
                 系统则不需要ext文件系统中,有inode 和block。其中每个文件(档案和目录)对应唯一一个inode,这个inode中保存
                 了文件所有的block。(block负责存放文件具体的数据)。不同的是对于档案block保存的是档案数
                 据,对于目录block保存的则是相应档案或子目录的inode
            * 退出vi的方法:esc + : + q!+enter
            * gnome-open /etc #shell指令打开图形界面的/etc
            * 在正则表达式中 ’^ g’ 与‘[^ g]’ 其中的 ^具有不同的含义。单引号中的^ 表示行头,[]中的^ 表示取反
                 关于linux 用户和群组,在当前用户指令下输入groups可以知道当前用户加入了哪些组,当用户想加入特定的组是可以通过两种方式:
                 第一:指令 gpasswd -a userid groupid(推荐第一种,因为有的时候文本显示的东西在更改
                 后不会实际产生作用,特殊情况除外所以统一用指令来更改万无一失)
                 第二:在/etc/group 文件相应的group最后一列加入用户id 再保存
                 groups指令可能显示可能会出现错误,在加入或删除组名时没有及时更新
                 通过newgrp groupsid 可以更改当前用户的有效群组 /etc/passwd 文件存放了用户id的相关信息
                 /etc/group 文件存放了groupid 的相关信息
            * 非root用户想使用sudo 必须在 /etc/sudoers 加入"用户id ALL=(ALL:ALL) ALL"语句 其中ALL可
                   以设置为某一条命令(绝对路径)这样就可以限制该用户利用sudo使用什么指令
                 linux中可以通过终端给不同的用户发消息,利用指令who 得到目前在线的用户和端口号,通过 指
                 令 write userid userport就可以开始给别的用户发送消息 ctrl+D结束消息输入
            * 总的来说,CPU从内存中一条一条地取出指令和相应的数据,按指令操作码的规定,对数据进行运算处理,直到程序执行完毕为止。CPU的运行原理就是:控制单元在时序脉冲的作用下,将指令计数器里所
                 指向的指令地址(这个地址是在内存里的)送到地址总线上去,然后CPU将这个地址里的指令读到指令寄存器进行译码。对于执行指令过程中所需要
                 用到的数据,会将数据地址也送到地址总线,然后CPU把数据读到CPU的内部存储单元(就是内部寄存器)暂存起来,最后命令运算单元对数据进行处
                 理加工。周而复始,一直这样执行下去,天荒地老,海枯枝烂,直到停电。来自 <http://blog.chinaunix.net/uid-23069658-id-3563960.html>
*** emacs
**** org-mode
           * 学习地址[fn:org_mode] 
           * org-mode打开的时候只显示一级标题后面有.. 表示有内容。按 *TAB* 键可以打开或者关闭目录。
             按 *shift+tab* 打开全部目录
           * 将org文件导出为其他文件的方法：C-c C-e接着按选项选择
           * 列举内容时，假如要加序号，则序号一定要对齐并且列表后面要加 *空格* 不然无法正常显示出来。
           * 当文本内容中想输入“_ ”（下标） " ^ "（上标） 等表示字体的符号时，记得加空格
           * alt + ret 插入一个同级标题，Ctrl+ret添加改级目录项
           * 文档元数据包括TITLE，AUTHOR等。使用时 #+TITLE： 注意：要紧跟title变颜色后才成功。更多元数据见网址    
                        http://www.360doc.com/content/14/1219/13/20545288_434126794.shtml
           * C-c C-t 改变当前条目状态（TODO DONE NULL) C-c C-d 增加截止期限 C-c C-s增加日程安排
           * C-Z 切换配置从 *vim* 模式到 *emacs* 的转换 (仅限于使用陈斌的配置)
           * A+S up/down将当前项上/下移动，会改变序号
           * C-c / 打开查找稀疏树，因为它显示的只是待查找项的最小目录树，所以叫稀疏树 
           * A+S left/right 提升/降低该项的级别(标题），不包含子项
           * 脚注创建 使用"[fn:example]"即可创建一个脚注 C-c C-c 即可在脚注和定义互切换
           * 在TODO项后面输入 A+M+S 可以增加一个新的TODO项
           * 定义只在一个文件中有效的TODO关键字（5.2）。一般我们在选择TODO状态切换的时候会有几个选项，
             当然我们可以自己定义这个选项的快捷字母。使用语句 #+TODO: DONE(W) 并在该行上使用C-c C-c
             使其生效，这样当我们按下C-c C-t后则会出现DONE（w)而不是默认设置的
           * C-c - 在下面增加带“-”的一行
**** OTHER
           * MELT+>可以移动到文本末尾 MELT+<可以移动到文本开头
           * C-X C-Q 可以将缓冲区切换为只读缓冲区或者取消
           * C-x b 切换缓冲区
           * CTRL+A可以移动到本行开头 CTRL+E可以移动到本行末尾

*** python
*** windows
           * 如何在cmd中增加新命令：emacs命令。打开系统属性（在搜索框中搜索path）-》环境变量-》
	     选中path并点编辑-》增加emacs应用程序所在目录并以\结尾。这样就可以在CMD中直接输入
	     emacs来启动了
           * 删除右键git bash选项：打开注册表（cmd中输入regedit） 找到并删除\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\backtory\git_bash
	   * 远程连接复制文件方法：连接时点选项->本地资源->详细信息->将本地驱动器选上，这样就可以作为一个复制区域
	   * 远程桌面登录时输入的用户名指的是计算机名称而不是全名，计算机名称需要在"计算机管理->本地用户和组"中进行更改
	   * 输入远程VPN 网址（222.240.187.100），浏览器无法连接（easyconnect显示无法连接服务端），
	     这可能是SSL3没打开，Internet选项->高级->使用SSL3.0
	   * 远程桌面连接出现“终端服务器超出了最大允许连接数”的错误，解决方案：开始 ==> 运行 ==> 输入: mstsc /admin。记得mstsc后带空格

*** SQL
           * 关系数据库包括并，差，交，笛卡尔积，投影，除以及 *连接* 关系。在连接关系中通过主表的主键
             与从表的外键建立连接。（外键必须是从表的主键或者唯一值）
           * 建立E-R模型时注意优化表格达到第三范式,主键确定则其它列的值也确定了我们称之为第二范式，第三范式则是消除了传递性依赖的第二范式
           * 分组计算：计算函数和GROUP BY 命令组合，当分组需要加判定条件时使用HAVING而不是WHERE
           * SQL 自学网 http://www.51zxw.net/list.aspx?cid=492
	   * SQL server 2008 卸载过程中出现属性不匹配错误  解决方案 https://www.zhihu.com/question/34621524/answer/64718217
	     重新安装过程中注意不要随意更改目录
	   * SQL server 2008 安装中心，包括SQL server的安装以及其他组件（SQL server manager studio）等的安装；
	     关于组件安装步骤 选择新的SQL独立安装或安装现有功能->选择执行新的SQL server2008安装->管理工具-基本
	   * SQL server  manager studio 与SQL server注意版本要一致（2008对2008） 不然会出现连接问题
	     SQL server只是一个服务器，它给我们提供管理数据库的一个服务，而SQL server manager studio只是使用这个服务器的工具
	     也可以直接使用命令行来进行SQL Sever的操作
	   * 远程数据库保存到本地方法 源：生成脚本文件   目：导入脚本（执行脚本）
	   * 数据库中执行SQL语句时 注意同义词表的存在
	   * 当碰到复杂的报表处理时可以通过select .. from（select .. from where..) as alias where  一步步简化报表
	   * select .. from 数据库名.dbo.表名   可以直接使用同源的其它数据库的表
	   * where,group by 后面的列名不能使用别名，因为别名可以重复
	   * SQLServer中有char、varchar、nchar、nvarchar四种类型来对应。有var前缀的，表示是实际存储空间是变长的
             ，比如varchar,nvarchar变长字符数据则不会以空格填充；数据库中，英文字符只需要一个字节存储就足够了，但汉字和其他众多非
            英文字符，则需要两个字节存储。如果英文与汉字同时存在，由于占用空间数不同，容易造成混乱，导致读取出来的字符串是乱码。Unicode
            字符集就是为了解决字符集这种不兼容的问题而产生的，它所有的字符都用两个字节表示，即英文字符也是用两个字节表示。而前缀n就表示
            Unicode字符，比如nchar,nvarchar，这两种类型使用了Unicode字符集。[fn:different_char]
	   * 一个select语句就是一个视图
	   * insert into table() select  其中()中的顺序应该和select的顺序一模一样
	   * 注意 where is null 和where =null的区别
	   * left join 后面不能跟select出来的临时表
	   * 联合主键中，联合主键A与联合主键B的值不能相同
	   



*** GIT
           * git clone时遇见error setting certificate verify locations错误时，可以尝试
	         用 git config --global http.sslVerify false 来解决
           * git三部曲 git add（添加文件到缓冲区）->git commit（缓冲区文件到本地库）->
	         git push(上传改动到服务器）。其中可以通过git status查看状态
           * git push 方法 
           * 通过指令git remote add "分支名称" "仓库URL" // 添加push仓库对应的名称
           * 通过指令git push "分支名称" // push 文件到仓库（会提示输入仓库的用户名和密码）
           * 详情见http://my.oschina.net/u/1050949/blog/194536 
           * git 不设置代理方法：git config --global --unset http.proxy
	                         git config --global --unset https.proxy
           * git clone经常连接不上的解决方法：git config --global http.postBuffer 52488000
                      
           * git clone 时出现端口无法访问的情况下，有可能时端口被禁止因此要使用代理。先找到代理端口：
	        打开网络和共享中心-Internet选项-连接-局域网设置-高级，里面有代理服务器地址和端口；在使用
	        指令 git config --global http.proxy http://127.0.0.1:8088 (代理地址和端口）即可。
	        这里容易出现的问题就是代理设置未成功，通过指令 git config --get --global http.proxy查看
	        设置的代理。详情见 http://www.tuicool.com/articles/2aYjAz7
	   * git 分支 详情见http://www.cnblogs.com/BeginMan/p/3543240.html
	   * git push 当不同的用户push到同一个仓库时，同名文件会被覆盖，因此应该先clone再push
	   * 当输入指令 git pull 和git push后显示 already up-to-date 或者 everything up-to-date,两种
	       情况说明远程库和本地库是完全一样的版本（commit产生版本）
                  
*** C#
**** ASP.NET MVC框架
***** MVC
          * 学习网址 http://www.cnblogs.com/powertoolsteam/p/MVC_one.html

	  * MVC （model view *controller* ）
	    controller作为MVC的核心，它负责接收用户发出的HTML的请求，并作出相应的响应
	    每个URL“ /”后的字段都是个函数名（第一个为controller的类名）

	  * 通常情况下 controller的函数中返回view就可以正确显示页面，但这只能显示静态
	    页面，要想显示动态页面必须在环节中融入model。三者的合理调用关系controller
	    使用model提供的模板（通常是类）将数据保存到Viewdata或者ViewBag,接着controller调用view
	    来显示HTML，view需要的数据来自ViewData和ViewBag。

	  * ViewModel的出现是为了减少view中HTML中的呈现逻辑。另外其实可以将model的定义（类定义）直接放
            在controller中，但是为了能够使代码结构清晰，所以使用了MVC层次。

	  * 在cshtml文件中使用语句 @using xx-namespace (使用某个命名空间）
	                         @model xx-model(使用该命名空间中的类）
	    一般这种语句是连起来使用，可以用@Model指代引用的类

          * visual studio tools（VS）中连接数据库的功能需要先安装SQL server manager studio（SSMS）

	  * <connectionStrings>包含了连接数据库的一切信息
	     eg:<add name="hnkpi" connectionString="data source=10.104.17.149;initial catalog=hnkpi
             ;persist security info=True;user id=sa;password=daisyhzh666;MultipleActiveResultSets=True;
             App=EntityFramework" providerName="System.Data.SqlClient"/>
	    前提是安装了SQL server managerment 这样VS会自动为我们打开该数据库

	  * <input name="" value="">中的信息传到控制器时name表示变量名，value表示该变量的值

	  * RedirectToAction("xx") 其中xx表示控制器的函数

	  * migration 学习网址 https://msdn.microsoft.com/en-us/data/jj591621.aspx

	  * 怎么判断是codefirst 使用了system.data.entity.dbcontext与system.data.entity.dbset,没有
	    可视化文件，就是code first http://blog.csdn.net/dj2008/article/details/23756895

	  * 一个solution里面有多个project，project所在文件夹名字不能随意更改(猜测该文件夹名和命名空间有关)，
            不然加载solution后不能正确加载project

	  * 不要随便在控制台输入 update-package 指令，这会更改web-config的值从而引起“类型初始值设定项引发异常”。

	  * 上下文的模型已在数据库创建后发生更改问题
	    分析：使用code first后 MVC会在数据库自动创建 migration开头的表记录数据库的变化达到监控数据迁徙的目的
	    解决方案：在数据库删除该表后即可，注意SQL server management中去删除

	  * 利用Oledb对dataset和excel数据快速导入 http://www.360doc.com/content/11/0904/14/789927_145702149.shtml

	  * 利用oledb取到excel的数据后 第一行自动变为列名称并不计入行统计中（datatable.Rows.count）

	  * [ValidateAntiForgeryToken]要和[HttpPost]一起使用才有效

	  * 在控制器中返回视图文件时，假如该视图文件不在控制器同名目录，则要加上后缀（.cshtml）；同目录不用加。

	  * MVC 实体类表示数据库表的联合主键时 需要加上主键编号n[Key,Column(order = n)],来表示不同的主键,MVC自带的
	    函数edit和detail中需要的参数个数为主键的个数，在函数dbcontext.Find()一次传入这些参数就可以正确运行

	  * 抛出异常的函数会进行回滚操作，但是之前的函数不会dbcontext.add()和dbcontext.save()函数一起用时，当添加的
	    数据主键重复时，往往是dbcontext.save()函数抛出异常并进行回滚，但是此时已经进行了add，需要remove才能真正把
	    主键重复的数据从数据表中清除
	    


***** HTML SCRIPT
          * <input>中的id 和name 作用不太相同，id的作用是在<script>中的标示给本HTML使用，name的作用
            是传递数据给cotroller使用，name也可以传给<script>
	  * 在使用包含文件上传控件的表单时，必须使用enctype="multipart/form-data"
	  * cshtml中的<script>中出错也不会报错，灵活使用alert("string")可以知道运行到哪里
	  * $.each(data,function(index,value))该函数依次遍历data中的数据，index表示
	    遍历的索引，value表示该索引的值。其中data,index,value名字可变但是顺序不能错，当data里没有数据
	    时each函数跳出，data为空时一次遍历都不执行
	  * 

	    
**** 其它
          * C# , .Net framework和visual studio 三者的关系。其中.Net framwork 为程序
           开发框架，提供了很多安全的API函数其作用类似于JAVA虚拟机。visual studio是一个
           IDE
          * 考虑到.NET 程序的交互性（.NET程序指的是使用.Net framwork开发的程序，它可以
            VB或者F#，C#语言开发）然后VB语言是大小写不区分的，所以在C#中使用大小写用来区
            分的代码最好不要由外部访问，因为VB语言可能识别不了这种差异
	  * readonly 与const 区别：readonly表示运行时常数，而const为编译时常数，因此
	    readonly字段可以在构造函数通过变量来赋值，但是const不可以
	  * @ 取消转义字符的意思
	  * 不能在main函数里面定义类或者结构体
	  * 一旦定义partial class则所有该类都必须包含关键字partial
	  * 正则表达式中的{n}表示上一个集合（字符）有n个,一个小括号里面是一个集合，() 是为了提取匹配的字符串。
            表达式中有几个()就有几个相应的匹配字符串
	  * 正则表达式使用或“|”时，倘若A规则包含B规则，则要把A规则放在前面，通俗的说长的规则要放在短的规则
	    前面
        
*** C++
    * public 本类，子类，本类对象都可以访问；
      protected 本类，子类，友元函数可以访问，本类对象不能访问；
      private 本类，友元函数可以访问。其他都不可以  （这是最基本原则）
      public继承不改变属性（所以父类 private成员不可被子类及其对象使用）
      protected继承将public属性 改为 protected 其余不变
      private继承所有属性都为private 
      http://www.jb51.net/article/41642.htm
    * 引用指一个变量的别名（必须要初始化），注意常引用的使用
    * 类与类之间的关系：继承，关联，组合，聚合
      关联（两个类有关系，有交集）《聚合（表示has-a的关系比较松散《组合（表示contain
      -a,同时存在）
      http://blog.chinaunix.net/uid-20437338-id-1946491.html
    * new和malloc的区别：new 会自动调用其构造函数而malloc不会
    * 程序运行时的内存分配：静态存储区域（全局变量）；栈（函数局部变量；堆（new）
    * 静态全局变量和全局变量的区别：静态全局变量只在本CPP文件内有效，其他无差别
    * 静态变量（包括全局和局部）只能被初始化一次
    * 重载和const http://blog.sina.com.cn/s/blog_64053138010171rt.html
      重载的判断条件不包括返回值类型

** PLICC
*** upexcel
**** probleam and solution，conclusion
     * P:运行后浏览器无法运行该test网页 S：如果设置了代理服务器，记得取消本地地址的代理服务器
     * P:本地F5后，出现文件丢失问题无法正确运行 S：因为本地没有数据库，需要将数据库复制到本地
     * P:导入excel表到dataset中数据无法出现在table中  S：关键函数OleDbDataAdapter.fill(dataset,table)
       其中table是dataset中的表格，用来存放excel中一个sheet的数据
     * datetime类型不能为空，使用判断函数datetime.parse时如果出错会抛出一个异常，应该将判断函数
       包含在一个判断函数中，通过catch来返回false
     * P:插入的excel表中存在重复的主键，则后面的主键全部显示为重复主键  S：增加dbcontext.remove()
       C:出现异常的函数为dbcontext.save（）但是其之前的函数没有进行回滚，所以增加的一直是重复的主键
	

** 存款
   开始时间    2016/7/1 日
   每月存款数  2000
   预计存款数  10万 
   2016/8/31  9000+3800=12800
   2016/9/5   9000+3600=12600
   2016/9/12  9000+1000=10000

* Todo with days
** DONE 完成《爱的觉醒》阅读
   CLOSED: [2016-05-31 Tue 23:56] DEADLINE: <2016-05-31 Tue>
   - State "DONE"       from "TODO"       [2016-05-31 Tue 23:56]

** DONE 完成《24重人格》阅读
   CLOSED: [2016-06-06 Mon 17:29] DEADLINE: <2016-06-15 Wed>
   - State "DONE"       from "TODO"       [2016-06-06 Mon 17:29]

** DONE 完成《灵魂的黑夜》阅读 
   DEADLINE: <2016-07-15 周五>
   
* Footnotes

[fn:example] just a example for footnotes

[fn:org_mode] http://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html#sec-4

[fn:different_char] http://www.cnblogs.com/mekong/archive/2009/04/17/1437996.html




  


  
  
